my_tuple = (10, 20, 30)
my_tuple[1] = 99  # Attempting to change the second value

# output: TypeError: 'tuple' object does not support item assignment

✅ Why This Is Useful:
Data Safety: Ensures the data can't be changed by accident.

Hashability: Tuples can be used as dictionary keys or in sets (if they contain only hashable types), unlike lists.

Intentional Design: Signals that the contents should not change, making code easier to reason about.


✅ Similarities Between Tuples and Lists
Both are collections that can store multiple values.

Both can store mixed data types: strings, numbers, other lists/tuples, etc.

Both are ordered: elements have a fixed position.

You can iterate over both using loops.

❗️Key Differences
Feature	                                 List	                                          Tuple
Mutable                           ✅ Yes (can change elements)	                   ❌ No (immutable)
Syntax	                          [] (square brackets)	                           () (parentheses)
Can be dictionary keys          	❌ No (lists are unhashable)	                   ✅ Yes (if fully immutable)
Performance                     	Slightly slower	                                 Slightly faster
Methods Available               	More (e.g., append, remove)	                     Fewer (mainly count, index)


# ✅ Tuple as a dictionary key
location = {(40.7128, -74.0060): "New York"}
print(location[(40.7128, -74.0060)])  # Output: New York

# ❌ List as a dictionary key (causes an error)
bad_key = {[40.7128, -74.0060]: "New York"}

#outpur: TypeError: unhashable type: 'list'

Even inside a tuple, if one element is a list or any other mutable object, then the whole tuple becomes unhashable and can’t be used as a key:
t = ([1, 2, 3], 4)
hash(t)  # ❌ TypeError

🔐 So You’d Use a Tuple When:
You want to protect your data from accidental changes

You need to store fixed information, like (latitude, longitude), or config settings

You need to use it as a key in a dictionary or a value in a set

Good for: 
- Fixed data
- Data safety
- Dictionary keys
Syntax: 	my_tuple = (1, 2, 3)


🔁 You’d Use a List When:
You need to modify, append, or remove items

You’re dealing with dynamic data that changes over time

You want to sort or reorder the data

Good for:
- Data that changes
- Iteration
- Adding/removing items

Syntax: 	my_list = [1, 2, 3]

🎯 Final Thought:
So yes — tuples and lists are similar, but we choose between them based on how we plan to use the data:

🔸 Use a list for flexibility.
🔹 Use a tuple for stability.

🏎️ Why Tuples Are Slightly Faster Than Lists (immutable, not changing,less memory occupy, working on a fixed structure not changin then adding or removing)
The difference in performance comes down to simplicity and immutability.

⚙️ 1. Immutability = Less Overhead
Tuples are immutable, so Python doesn’t need to include all the machinery for changing, appending, or removing elements.

That means tuples use less memory and have a simpler internal structure.

📦 Think of it like:

A tuple is a sealed box. Once packed, nothing changes.

A list is an open toolbox. You can add, remove, or replace tools any time — which needs more stuff to manage.

🧠 2. Faster Operations in Some Cases
Because Python knows tuples can’t change:

It can optimize their use behind the scenes (like caching or skipping safety checks).

Functions that just read data (like looping, indexing) are slightly faster with tuples.

import timeit

# Creating a list
list_time = timeit.timeit(stmt="[1, 2, 3, 4, 5]", number=1_000_000)

# Creating a tuple
tuple_time = timeit.timeit(stmt="(1, 2, 3, 4, 5)", number=1_000_000)

print("List creation time:", list_time)
print("Tuple creation time:", tuple_time)

#output:
List creation time: 0.18 sec
Tuple creation time: 0.14 sec

✅ Summary
Reason	Why Tuples Are Faster
✅ Simpler structure	No need for methods like .append() or .remove()
✅ Less memory use	No need to store capacity for resizing
✅ Optimization	Python can make safe assumptions (no change allowed)



